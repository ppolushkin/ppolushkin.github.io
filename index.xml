<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42 notes</title>
    <link>http://ppolushkin.github.com/</link>
    <description>Recent content on 42 notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us-ru</language>
    <managingEditor>pavel.polushkin@gmail.com (Pavel Polushkin)</managingEditor>
    <webMaster>pavel.polushkin@gmail.com (Pavel Polushkin)</webMaster>
    <lastBuildDate>Mon, 19 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ppolushkin.github.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Operators and Decision Constructs</title>
      <link>http://ppolushkin.github.com/java_operators/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/java_operators/</guid>
      <description>Java Operators == Comparing of primitives compared by values
char c = 100; int i = 100; System.out.println(c==i);//Prints true Comparing of primitive with wrapper unwrap wrapper and compare by values;
char c = 100; Integer i = 100; System.out.println(c==i);//Prints true If the operands of an equality operator are both of either reference type or the null type, then the operation is object equality.
 It is a compile-time error if it is impossible to convert the type of either operand to the type of the other by a casting conversion (§5.</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>http://ppolushkin.github.com/readme/</link>
      <pubDate>Mon, 19 Nov 2018 00:21:24 +0300</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/readme/</guid>
      <description>42 developer&amp;rsquo;s notes This is Hugo based resources for ppolushkin.github.com resource.
Development Run hugo server D and open localhost:1313 site.
Publish  Build public folder by running hugo command  hugo  Go to public folder, commit and push to ppolushkin.github.com  cd public git commit -am &amp;#39;comment&amp;#39; git push origin master  Go to root folder, commit and push this root repository  cd .. git commit -am &amp;#39;comment&amp;#39; git push origin master Code highlighting examples Golang: func env(key, defaultVal string) string { appPort, ok := os.</description>
    </item>
    
    <item>
      <title>Backet sort</title>
      <link>http://ppolushkin.github.com/html/bucket_sort/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/bucket_sort/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Radix Sort</title>
      <link>http://ppolushkin.github.com/html/radix_sort/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/radix_sort/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>Counting Sort</title>
      <link>http://ppolushkin.github.com/html/counting_sort/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/counting_sort/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Quick sort</title>
      <link>http://ppolushkin.github.com/html/quick_sort/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/quick_sort/</guid>
      <description> Quick sort Divide and conquer Partitioning array Worst case partition Best case partition Real life partition According to book average partition is more likely Best-case.  Randomized version of quickSort  </description>
    </item>
    
    <item>
      <title>Merge Sort</title>
      <link>http://ppolushkin.github.com/html/merge_sort/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/merge_sort/</guid>
      <description>Overall idea Merge principle Our MERGE procedure takes time O(n), where n is the total number of elements being merged, and it works as follows. Returning to our card- playing motif, suppose we have two piles of cards face up on a table. Each pile is sorted, with the smallest cards on top. We wish to merge the two piles into a single sorted output pile, which is to be face down on the table.</description>
    </item>
    
    <item>
      <title>Heap Sort</title>
      <link>http://ppolushkin.github.com/html/heap_sort/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/heap_sort/</guid>
      <description> Heap Maintaining the heap property Building the heap Heap sort algorithm Priority queue  </description>
    </item>
    
    <item>
      <title>Insertion Sort</title>
      <link>http://ppolushkin.github.com/html/insertion_sort/</link>
      <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/insertion_sort/</guid>
      <description>static void insertSort(int[] dest) { int low = 0; int high = dest.length; for (int i = low; i &amp;lt; high; i++) { for (int j = i; j  low &amp;amp;&amp;amp; dest[j - 1]  dest[j]; j--) { swap(dest, j, j - 1); } } } static void swap(int dest[], int l, int r) { int t = dest[l]; dest[l] = dest[r]; dest[r] = t; }    Data structure Array   Worst-case performance О(n2) comparisons, swaps   Best-case performance O(n) comparisons, O(1) swaps   Average performance О(n2) comparisons, swaps   Worst-case space complexity О(n) total, O(1) auxiliary   Possible improvement Insert position can be find by binary search.</description>
    </item>
    
    <item>
      <title>Comparision Sorts</title>
      <link>http://ppolushkin.github.com/html/comparision_sorts/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/comparision_sorts/</guid>
      <description>Comparision sorts Lower bounds for comparision sorts The decision tree model Compare algorithms Some thoughts about algorithms  </description>
    </item>
    
    <item>
      <title>Asymptotic Notations</title>
      <link>http://ppolushkin.github.com/html/asymptotic_notations/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/asymptotic_notations/</guid>
      <description>    </description>
    </item>
    
    <item>
      <title>Случайные величины</title>
      <link>http://ppolushkin.github.com/html/prob_values/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/prob_values/</guid>
      <description>Случайные величины  </description>
    </item>
    
    <item>
      <title>Классическое определение вероятности наступлеия случайного события</title>
      <link>http://ppolushkin.github.com/html/probability/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/probability/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>Основные формулы комбинаторики</title>
      <link>http://ppolushkin.github.com/html/combinatorics/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/combinatorics/</guid>
      <description>&amp;#167;&amp;nbsp;1.&amp;nbsp;Основные формулы комбинаторики В данном разделе мы займёмся подсчётом числа &amp;#171;шансов&amp;#187;. О числе шансов говорят, когда возможно несколько результатов какого-либо действия (извлечение карты из колоды, подбрасывание кубика или монетки). Число шансов&amp;nbsp;&amp;#151; это число способов проделать это действие или, что то же самое, число возможных результатов этого действия.   Теорема о перемножении шансов Пусть одно действие можно проделать пятью способами, а другое&amp;nbsp;&amp;#151; двумя. Каким числом способов можно проделать пару этих действий?</description>
    </item>
    
    <item>
      <title>Absolute and relative position</title>
      <link>http://ppolushkin.github.com/html/absolute_and_relative/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/absolute_and_relative/</guid>
      <description>Here is an example how relative and absolute works together.  An absolutely positioned element is actually placed relative to the boundaries of its closest positioned (~ relative positioned) ancestor  More info: https://www.safaribooksonline.com/library/view/css3-the-missing/9781449339456/ch15.html   &amp;lt;!DOCTYPE html &amp;lt;html &amp;lt;head &amp;lt;meta charset=&#34;UTF-8&#34; &amp;lt;titleStacking and float&amp;lt;/title &amp;lt;styletype=&#34;text/css&#34; .c { float: left; position: relative; width: 100px; height: 100px; opacity: 0.75; background-color: #00b3ee; border: 1px dashed #999966; margin: 10px; } img { width: 50px; height: 50px; border-radius: 50%; position: absolute; top: 30px; right: 30px; } &amp;lt;/style &amp;lt;/head &amp;lt;body &amp;lt;div class=&#39;p&#39; &amp;lt;div class=&#34;</description>
    </item>
    
    <item>
      <title>CSS Box model</title>
      <link>http://ppolushkin.github.com/html/box/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/box/</guid>
      <description>  Box model CSS  More info in MDN   </description>
    </item>
    
    <item>
      <title>CSS Position property</title>
      <link>http://ppolushkin.github.com/html/position/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/position/</guid>
      <description>By default uses Static position. The CSS position property lets you control how and where a web browser displays particular elements. Using position, you can, for example, place a sidebar anywhere you wish on a page or make sure a navigation bar at the top of the page stays in place even when visitors scroll down the page. CSS offers four types of positioning:
Absolute. Absolute positioning lets you determine an element&amp;rsquo;s location by specifying a left, right, top, or bottom position in pixels, ems, or percentages.</description>
    </item>
    
    <item>
      <title>CSS Shadow</title>
      <link>http://ppolushkin.github.com/html/box_shadow/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/box_shadow/</guid>
      <description>  Try it in jsbin.com </description>
    </item>
    
    <item>
      <title>Display</title>
      <link>http://ppolushkin.github.com/html/display/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/display/</guid>
      <description>A block-level tag creates a break before and after it. The &amp;lt;p&amp;gt; tag, for example, creates a block that&amp;rsquo;s separated from tags above and below. Headlines, &amp;lt;div&amp;gt; tags, tables, lists, and list items are other examples of block-level tags.
Inline tags don&amp;rsquo;t create a break before or after them. They appear on the same line as the content and tags beside them. The &amp;lt;strong&amp;gt; tag is an inline tag. A word formatted with this tag happily sits next to other text&amp;mdash;even text wrapped in other inline tags like &amp;lt;em&amp;gt;.</description>
    </item>
    
    <item>
      <title>Lost height</title>
      <link>http://ppolushkin.github.com/html/broken_background/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/broken_background/</guid>
      <description>To the consternation of many web designers, backgrounds and borders don&amp;rsquo;t react to floated elements the same way content does. Say you float an element&amp;mdash;a sidebar for example&amp;mdash;to the right. The content below the sidebar moves up and wraps around it, just as it should. But if that content has a background or border set on it, then that background or border actually appears underneath the floated sidebar (Figure&amp;nbsp;7-16, left). In essence, a web browser wraps the text around the float, but not the border or background.</description>
    </item>
    
    <item>
      <title>Lost height</title>
      <link>http://ppolushkin.github.com/html/lost_height/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/lost_height/</guid>
      <description>Here is demonstration how to fix height of div .p. The problem is that browser firstly draw &#34;normal&#34; elements (div .p) and then &#34;float&#34; ones (which is div .c in example).  That&#39;s why without tricky hack with .p:after height of .p is zero!  More information is here: http://getbootstrap.com/css/#helper-classes-clearfix   &amp;lt;!DOCTYPE html &amp;lt;html &amp;lt;head &amp;lt;meta charset=&#34;UTF-8&#34; &amp;lt;titlep div height is zero&amp;lt;/title &amp;lt;style type=&#34;text/css&#34; .p { opacity: 1; background-color: #22b333; border: 1px dashed #999966; } .</description>
    </item>
    
    <item>
      <title>Stacking of normal and positioned elements</title>
      <link>http://ppolushkin.github.com/html/stacking_of_normal_and_positioned/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/stacking_of_normal_and_positioned/</guid>
      <description>Positioned (absolute, relative, Fixed) elements are always on top of normal (static)  More info:   https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/Stacking_without_z-index   https://www.safaribooksonline.com/library/view/css3-the-missing/9781449339456/ch15.html#stacking_elements     &amp;lt;!DOCTYPE html &amp;lt;html &amp;lt;head &amp;lt;meta charset=&#34;UTF-8&#34; &amp;lt;titleStacking without z-index&amp;lt;/title &amp;lt;styletype=&#34;text/css&#34; .a { height: 100px; width: 100px; opacity: 1; background-color: #22b333; border: 1px dashed #999966; position: absolute; left: 90px; top: 20px; } .a:before { content: &#39;i am absolute or positioned&#39;; } .n { height: 100px; width: 100px; opacity: 1; background-color: #999966; border: 1px dashed #999966; } .</description>
    </item>
    
    <item>
      <title>Understand float property</title>
      <link>http://ppolushkin.github.com/html/float/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <author>pavel.polushkin@gmail.com (Pavel Polushkin)</author>
      <guid>http://ppolushkin.github.com/html/float/</guid>
      <description>HTML normally flows from the top of the browser window down to the bottom, one headline, paragraph, or block-level element on top of another. This word-processor&amp;ndash;like display is visually boring (Figure, top), but with CSS, you&amp;rsquo;re far from stuck with it. You&amp;rsquo;ll learn lots of new methods for arranging items on a web page in Part 3, but you can spice up your pages plenty with one little CSS property&amp;mdash;float.</description>
    </item>
    
  </channel>
</rss>